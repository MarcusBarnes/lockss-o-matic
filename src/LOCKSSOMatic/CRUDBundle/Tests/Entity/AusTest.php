<?php

namespace LOCKSSOMatic\CRUDBundle\Tests\Entity;

use LOCKSSOMatic\CRUDBundle\Entity\AuProperties;
use LOCKSSOMatic\CRUDBundle\Entity\Aus;
use LOCKSSOMatic\CRUDBundle\Entity\Content;
use LOCKSSOMatic\PLNImporterBundle\Command\PLNPluginImportCommand;
use LOCKSSOMatic\PLNImporterBundle\Command\PLNTitledbImportCommand;
use PHPUnit_Framework_TestCase;
use SimpleXMLElement;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-27 at 10:27:41.
 */
class AusTest extends KernelTestCase
{

    private $plugin;
    private $au;

    public function __construct()
    {
        parent::__construct();
        static::bootKernel();
        $this->container = static::$kernel->getContainer();
    }

    public function setUp()
    {
        parent::setUp();
        $em = $this->container->get('doctrine')->getManager();

        $plnCmd = new PLNPluginImportCommand();
        $plnCmd->setContainer($this->container);
        $plnXml = new SimpleXMLElement($this->getPluginXml());
        $plnCmd->importPlugin($plnXml);
        $em->flush();

        $auCmd = new PLNTitledbImportCommand();
        $auCmd->setContainer($this->container);
        $auXml = new SimpleXMLElement($this->getAuXml());
        $auCmd->addAu($auXml);

        $em->flush();
        $em->clear();

        $this->plugin = $em->getRepository('LOCKSSOMaticCRUDBundle:Plugins')->findOneBy(array(
            'name' => 'phony plugin for testing'
        ));

        $this->au = $em->getRepository('LOCKSSOMaticCRUDBundle:Aus')->findOneBy(array(
            'plugin' => $this->plugin
        ));
    }

    public function tearDown()
    {
        parent::tearDown();
        $em = $this->container->get('doctrine')->getManager();
        $em->remove($this->plugin);
        $em->remove($this->au);
        $em->flush();
        $em->clear();
    }

    public function testGetEmptySize()
    {
        $au = new Aus();
        $this->assertEquals(0, $au->getContentSize());
    }

    public function testGetSize()
    {
        $au = new Aus();
        $content = new Content();
        $content->setSize(120);
        $au->addContent($content);
        $this->assertEquals(120, $au->getContentSize());

        $content = new Content();
        $content->setSize(105);
        $au->addContent($content);
        $this->assertEquals(225, $au->getContentSize());
    }

    public function testGetSizeWithNulls()
    {
        $au = new Aus();
        $content = new Content();
        $content->setSize(120);
        $au->addContent($content);
        $this->assertEquals(120, $au->getContentSize());

        $content = new Content();
        // no setSize()
        $au->addContent($content);
        $this->assertEquals(120, $au->getContentSize());

        $content = new Content();
        $content->setSize(105);
        $au->addContent($content);
        $this->assertEquals(225, $au->getContentSize());
    }

    public function testGetAuProperty()
    {
        $this->assertEquals('http://foo.example.com/', $this->au->getAuProperty('base_url'));
        $this->assertEquals('http%3A%2F%2Ffoo%2Eexample%2Ecom%2F', $this->au->getAuProperty('base_url', true));
    }

    public function testGenerateAuid()
    {
        $this->assertInstanceOf('LOCKSSOMatic\CRUDBundle\Entity\Aus', $this->au);
        $this->assertEquals('org|lockss|phony&base_url~http%3A%2F%2Ffoo%2Eexample%2Ecom%2F&journal_id~rare&volume_name~16', $this->au->generateAuid());
    }

    private function getAuXml()
    {
        $str = <<<'ENDXML'
<property name="Foo">
   <property name="attributes.publisher" value="Radiation Research Society" />
   <property name="journalTitle" value="Radiation Research" />
   <property name="issn" value="1234-5678" />
   <property name="eissn" value="3321-1234" />
   <property name="type" value="journal" />
   <property name="title" value="Foo Research Volume 16" />
   <property name="plugin" value="org.lockss.phony" />
   <property name="param.1">
    <property name="key" value="base_url" />
    <property name="value" value="http://foo.example.com/" />
   </property>
   <property name="param.2">
    <property name="key" value="journal_id" />
    <property name="value" value="rare" />
   </property>
   <property name="param.3">
    <property name="key" value="volume_name" />
    <property name="value" value="16" />
   </property>
   <property name="attributes.where" value="AUtest" />
   <property name="attributes.year" value="2010" />
  </property>
ENDXML;
        return $str;
    }

    private function getPluginXml()
    {
        $str = <<<'ENDXML'
<map>
  <entry>
    <string>plugin_identifier</string>
    <string>org.lockss.phony</string>
  </entry>
  <entry>
    <string>plugin_name</string>
    <string>phony plugin for testing</string>
  </entry>
  <entry>
    <string>plugin_version</string>
    <string>13</string>
  </entry>
  <entry>
    <string>required_daemon_version</string>
    <string>1.56.0</string>
  </entry>
  <entry>
    <string>plugin_config_props</string>
    <list>
      <org.lockss.daemon.ConfigParamDescr>
        <key>base_url</key>
        <displayName>Base URL</displayName>
        <description>Usually of the form http://&lt;journal-name&gt;.com/</description>
        <type>3</type>
        <size>40</size>
        <definitional>true</definitional>
        <defaultOnly>false</defaultOnly>
      </org.lockss.daemon.ConfigParamDescr>
      <org.lockss.daemon.ConfigParamDescr>
        <key>journal_id</key>
        <displayName>Journal Identifier</displayName>
        <description>Identifier for journal (often used as part of file names)</description>
        <type>1</type>
        <size>40</size>
        <definitional>true</definitional>
        <defaultOnly>false</defaultOnly>
      </org.lockss.daemon.ConfigParamDescr>
      <org.lockss.daemon.ConfigParamDescr>
        <key>username</key>
        <displayName>Username, unused</displayName>
        <description>Username - maybe used for login or something.</description>
        <type>1</type>
        <size>40</size>
        <definitional>false</definitional>
        <defaultOnly>false</defaultOnly>
      </org.lockss.daemon.ConfigParamDescr>
      <org.lockss.daemon.ConfigParamDescr>
        <key>volume_name</key>
        <displayName>Volume Name</displayName>
        <type>1</type>
        <size>20</size>
        <definitional>true</definitional>
        <defaultOnly>false</defaultOnly>
      </org.lockss.daemon.ConfigParamDescr>
    </list>
  </entry>
  <entry>
    <string>au_name</string>
    <string>"BioOne Plugin (Atypon Systems Platform), journal_id, volume_name</string>
  </entry>
</map>
ENDXML;
        return $str;
    }

}
